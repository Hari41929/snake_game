import pygame as p
from pygame.locals import * #for the keypads entering
import time # movement speed of the snake
import random # place for apple appearing
dimen = 40 # size of apple
bg_color = 148, 3, 252


class Apple:
    def __init__(self,parent_screen):
        self.parent_screen = parent_screen
        self.app = p.image.load("resources/apple.jpg").convert()
        self.x = dimen
        self.y = dimen

    def drawe(self):
            self.parent_screen.blit(self.app, (self.x, self.y))
            p.display.flip()


    def ran(self):
        self.x = random.randint(0,24)*dimen
        self.y = random.randint(0,19)*dimen






class Snake:
    def __init__(self,parent_screen,length):
        self.length = length # used for increasing size of the snake
        self.parent_screen = parent_screen
        self.block = p.image.load("resources/block.jpg").convert()
        self.x = [dimen]*length
        self.y = [dimen]*length
        self.direction = "right"


    def incre(self):
        self.length +=1
        self.x.append(-1)
        self.y.append(-1)


    def move_up(self):
        self.direction="up"
    def move_down(self):
        self.direction="down"
    def move_right(self):
        self.direction ="right"

    def move_left(self):
        self.direction ="left"







    def draw(self):
        self.parent_screen.fill((148, 3, 252))
        for k in range(self.length):
            self.parent_screen.blit(self.block, (self.x[k], self.y[k]))
        p.display.flip()




    def auto(self):
        for i in range(self.length-1,0,-1):
            self.x[i] = self.x[i-1]
            self.y[i] = self.y[i-1]
        if self.direction == "up":
            self.y[0] -= dimen
        if self.direction == "down":
            self.y[0] += dimen
        if self.direction == "right":
            self.x[0] += dimen
        if self.direction == "left":
            self.x[0] -= dimen

        self.draw()

class Game:
    def __init__(self):
        p.init()
        self.bg_music()
        self.screen = p.display.set_mode((1000, 800))
        p.mixer.init()


        self.screen.fill((bg_color))
        #self.render_bg()
        self.snake = Snake(self.screen,1)
        self.snake.draw()
        self.ap = Apple(self.screen)
        self.ap.drawe()


    def is_coli(self,x1,y1,x2,y2):
        if x1>=x2 and x1 <= x2+dimen:
            if y1 >= y2 and y1 <= y2+dimen:
                return True

        else:
            return False


    def bg_music(self):
        p.mixer.music.load("resources/smooth.mp3")
        p.mixer.music.play(4)

    def bg_mus1(self):
        p.mixer.music.load("resources/over (1).mp3")
        p.mixer.music.play(9)




    def displa_score(self):
        font = p.font.SysFont("arial",40)
        score = font.render(f"APPLE EATEN :{self.snake.length}",True,(255,255,234))
        self.screen.blit(score,(700,50))



    def play_sound(self,sound):
        s = p.mixer.Sound(f"resources/{sound}.mp3")
        p.mixer.Sound.play(s)

    def render_bg(self):
        bg = p.image.load("resources/bg.jpg").convert()
        self.screen.blit(bg,(0,0))






    def imple(self):
        self.render_bg()
        self.snake.auto()
        self.ap.drawe()
        self.displa_score()
        p.display.flip()

        if self.is_coli(self.snake.x[0],self.snake.y[0],self.ap.x,self.ap.y):
            self.play_sound("eat")
            self.snake.incre()
            self.ap.ran()



        for i in range(3,self.snake.length):
            if self.is_coli(self.snake.x[0],self.snake.y[0],self.snake.x[i],self.snake.y[i]):
                self.play_sound("hiss")


                raise " game over"


    def reset(self):
        self.snake = Snake(self.screen, 1)
        self.ap = Apple(self.screen)





    def gameo(self):
        self.render_bg()
        #self.screen.fill((bg_color))
        g = p.font.SysFont("arial",40)
        o = g.render(f"game over !! your score is {self.snake.length}",True,(255,255,234))
        self.screen.blit(o,(250,300))
        m = g.render(f"press enter to reset the game ! press esc to exit",True,(255,255,234))
        self.screen.blit(m, (250, 250))

        p.mixer.music.pause()
        self.bg_mus1()
        p.display.flip()




    def run(self):
        running = True
        pause = False
        while running:
            for e in p.event.get():
                if e.type == KEYDOWN:
                    if e.key == K_ESCAPE:
                        running = False
                    if e.key == K_RETURN:
                        self.bg_music()
                        #p.mixer.music.unpause()


                        pause = False
                    if e.key == K_UP:
                        self.snake.move_up()

                    if e.key == K_DOWN:
                        self.snake.move_down()
                    if e.key == K_RIGHT:
                        self.snake.move_right()

                    if e.key == K_LEFT:
                        self.snake.move_left()

                elif e.type == QUIT:
                    running = False

            try:
                if not pause:
                    self.imple()

            except Exception as e:
                self.gameo()
                pause = True
                self.reset()
            time.sleep(0.1)
if __name__ == "__main__":
    game = Game()
    game.run()













